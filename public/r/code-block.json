{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "code-block",
  "type": "registry:block",
  "title": "Code Block",
  "description": "A reusable and customizable code block component built with React and Motion.",
  "dependencies": ["motion", "shiki", "@shikijs/transformers", "lucide-react"],
  "files": [
    {
      "path": "components/code-block.tsx",
      "content": "'use client';\n\nimport { cn } from '@/lib/cn';\nimport {\n  HTMLAttributes,\n  useEffect,\n  useState,\n  useCallback,\n  ReactNode,\n  MouseEvent,\n  useRef,\n} from 'react';\nimport {\n  createHighlighter,\n  type Highlighter,\n  type BundledLanguage,\n  type LanguageInput,\n  type SpecialLanguage,\n} from 'shiki';\nimport React from 'react';\nimport { Check, Copy, LoaderCircle } from 'lucide-react';\nimport { AnimatePresence, motion, useMotionValue, useSpring } from 'motion/react';\n\nlet highlighterPromise: Promise<Highlighter> | null = null;\n\nasync function getHighlighter(lang: string, themes: string[]) {\n  if (!highlighterPromise) {\n    highlighterPromise = createHighlighter({\n      themes,\n      langs: [lang],\n    });\n  }\n  const highlighter = await highlighterPromise;\n\n  // ensure language is loaded\n  if (!highlighter.getLoadedLanguages().includes(lang)) {\n    await highlighter.loadLanguage(lang as BundledLanguage | LanguageInput | SpecialLanguage);\n  }\n\n  return highlighter;\n}\n\ntype CodeBlockDataProps = {\n  lang: string;\n  code: string;\n  themes?: { light: string; dark: string };\n};\n\nconst codeBlockClassName = cn(\n  'mt-0 bg-card text-sm text-[17px]',\n  '[&_pre]:py-4',\n  '[&_.shiki]:!bg-transparent',\n  '[&_code]:w-full',\n  '[&_code]:grid',\n  '[&_code]:bg-transparent',\n  '[&_.line]:px-4',\n  '[&_.line]:w-full',\n  '[&_.line]:relative',\n);\n\nconst darkModeClassNames = cn(\n  'dark:[&_.shiki]:!text-[var(--shiki-dark)]',\n  // \"dark:[&_.shiki]:!bg-[var(--shiki-dark-bg)]\",\n  'dark:[&_.shiki]:![font-style:var(--shiki-dark-font-style)]',\n  'dark:[&_.shiki]:![font-weight:var(--shiki-dark-font-weight)]',\n  'dark:[&_.shiki]:![text-decoration:var(--shiki-dark-text-decoration)]',\n  'dark:[&_.shiki_span]:!text-[var(--shiki-dark)]',\n  'dark:[&_.shiki_span]:![font-style:var(--shiki-dark-font-style)]',\n  'dark:[&_.shiki_span]:![font-weight:var(--shiki-dark-font-weight)]',\n  'dark:[&_.shiki_span]:![text-decoration:var(--shiki-dark-text-decoration)]',\n);\n\nexport async function codeToHtml({\n  code,\n  lang = 'tsx',\n  themes = { light: 'github-light', dark: 'catppuccin-frappe' },\n}: CodeBlockDataProps) {\n  const highlighter = await getHighlighter(lang, [themes.light, themes.dark]);\n  return highlighter.codeToHtml(code, {\n    lang,\n    themes: {\n      dark: themes.dark,\n      light: themes.light,\n    },\n    defaultColor: false,\n    cssVariablePrefix: '--_s-',\n  });\n}\n\ntype CodeBlockData = {\n  code: string;\n  language?: string;\n  fileName?: string;\n};\n\nexport type CodeBlockContextType = {\n  data: CodeBlockData;\n};\n\nconst CodeContext = React.createContext<CodeBlockContextType | undefined>(undefined);\n\nexport const useCodeContext = () => {\n  const context = React.useContext(CodeContext);\n  if (!context) throw new Error('Data must be passed as an object in CodeBlock');\n\n  return context;\n};\n\ntype CodeBlockProps = HTMLAttributes<HTMLDivElement> & {\n  children?: React.ReactNode;\n  data: CodeBlockData;\n};\n\nfunction CodeBlock({ children, className, data, ...props }: CodeBlockProps) {\n  return (\n    <CodeContext.Provider value={{ data }}>\n      <div className={cn('relative rounded-lg border border-border bg-card', className)} {...props}>\n        {children}\n      </div>\n    </CodeContext.Provider>\n  );\n}\n\nexport type CodeBlockHeaderProps = HTMLAttributes<HTMLDivElement>;\n\nfunction CodeBlockHeader({ children, className, ...props }: CodeBlockHeaderProps) {\n  return (\n    <div\n      className={cn(\n        'flex items-center justify-between  border-b border-border px-3 py-2 font-medium',\n        className,\n      )}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n}\n\nfunction CodeBlockFilename({ className, ...props }: HTMLAttributes<HTMLDivElement>) {\n  const { data } = useCodeContext();\n\n  return (\n    <div className={cn('truncate text-sm opacity-80 cursor-default', className)} {...props}>\n      {data.fileName ?? 'filename.tsx'}\n    </div>\n  );\n}\n\nexport interface ButtonCopyProps {\n  onCopy?: () => Promise<void> | void;\n  idleIcon?: ReactNode;\n  loadingIcon?: ReactNode;\n  successIcon?: ReactNode;\n  className?: string;\n  duration?: number;\n  loadingDuration?: number;\n  disabled?: boolean;\n}\n\nconst defaultIcons = {\n  idle: <Copy size={14} />,\n  loading: <LoaderCircle size={14} className=\"animate-spin\" />,\n  success: <Check size={14} />,\n};\n\nfunction ButtonCopy({\n  onCopy,\n  idleIcon = defaultIcons.idle,\n  loadingIcon = defaultIcons.loading,\n  successIcon = defaultIcons.success,\n  className = '',\n  duration = 1000,\n  loadingDuration = 500,\n  disabled = false,\n}: ButtonCopyProps) {\n  const [buttonState, setButtonState] = useState<'idle' | 'loading' | 'success'>('idle');\n  const handleClick = useCallback(async () => {\n    setButtonState('loading');\n    if (onCopy) await onCopy();\n    setTimeout(() => {\n      setButtonState('success');\n    }, loadingDuration);\n    setTimeout(() => {\n      setButtonState('idle');\n    }, loadingDuration + duration);\n  }, [onCopy, loadingDuration, duration]);\n\n  const icons = {\n    idle: idleIcon,\n    loading: loadingIcon,\n    success: successIcon,\n  };\n\n  return (\n    <>\n      <div className=\"relative flex justify-center\">\n        <button\n          type=\"button\"\n          className={`bg-background relative w-auto cursor-pointer overflow-hidden rounded-full border p-2 disabled:opacity-50 ${className}`}\n          disabled={buttonState !== 'idle' || disabled}\n          onClick={handleClick}\n          aria-label={buttonState === 'loading' ? 'Copying...' : 'Copy'}\n        >\n          <AnimatePresence mode=\"popLayout\" initial={false}>\n            <motion.span\n              transition={{ type: 'spring', duration: 0.3, bounce: 0 }}\n              initial={{ opacity: 0, y: -25, filter: 'blur(10px)' }}\n              animate={{ opacity: 1, y: 0, filter: 'blur(0px)' }}\n              exit={{ opacity: 0, y: 25, filter: 'blur(10px)' }}\n              key={buttonState}\n              className=\"flex w-full items-center justify-center\"\n            >\n              {icons[buttonState]}\n            </motion.span>\n          </AnimatePresence>\n        </button>\n      </div>\n    </>\n  );\n}\n\nfunction CodeBlockCopyButton() {\n  const { data } = useCodeContext();\n  const [copied, setCopied] = useState(false);\n\n  const handleCopy = async () => {\n    await navigator.clipboard.writeText(data.code);\n    setCopied(true);\n    setTimeout(() => setCopied(false), 1500);\n  };\n\n  return (\n    <ButtonCopy onCopy={handleCopy} className=\"text-xs opacity-70 hover:opacity-100 transition\" />\n  );\n}\n\n// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\nexport type CodeBlockContentProps = HTMLAttributes<HTMLDivElement> & {\n  themes?: { light: string; dark: string };\n  rippleEffect?: boolean;\n};\n\nfunction CodeBlockContent({ className, themes, rippleEffect, ...props }: CodeBlockContentProps) {\n  const [highlighted, setHighlighted] = useState<string>('');\n  const { data } = useCodeContext();\n  const containerRef = React.useRef<HTMLDivElement>(null);\n  const [scrollThumbTop, setScrollThumbTop] = useState(0);\n  const [scrollThumbHeight, setScrollThumbHeight] = useState(20);\n  const [isScrolling, setIsScrolling] = useState(false);\n  const [scrollActivity, setScrollActivity] = useState(0);\n  const scrollTimeout = useRef<NodeJS.Timeout | null>(null);\n  const [thumbTop, setThumbTop] = useState(0);\n  const [thumbHeight, setThumbHeight] = useState(20);\n  const [isExpanded, setIsExpanded] = useState(false);\n  const compressTimeout = useRef<NodeJS.Timeout | null>(null);\n\n  // ðŸ”¹ Cursor States\n  const [showBall, setShowBall] = useState(false);\n  const [hovered, setHovered] = useState(false);\n  const x = useMotionValue(0);\n  const y = useMotionValue(0);\n  const springX = useSpring(x, { stiffness: 200, damping: 25 });\n  const springY = useSpring(y, { stiffness: 200, damping: 25 });\n\n  const playDrop = () => {\n    const drop = new Audio('/sounds/click.mp3');\n    drop.volume = 0.4;\n    drop.play().catch(() => {});\n  };\n\n  const handleMouseMove = (e: React.MouseEvent) => {\n    const rect = containerRef.current?.getBoundingClientRect();\n    if (!rect) return;\n    x.set(e.clientX - rect.left - 10);\n    y.set(e.clientY - rect.top - 10);\n  };\n\n  // const handleMouseEnter = () => {\n  //   setHovered(true)\n  //   playDrop()\n  //   setTimeout(()=>setShowBall(true) ,100)\n  //   console.log(\"Enter\" , showBall)\n  // }\n\n  // const handleMouseLeave = () => {\n  //   setHovered(false)\n  //   playDrop()\n  //   setTimeout(() => setShowBall(false), 100)\n  //   console.log(\"Leave\",showBall)\n  // }\n\n  const handleClick = () => {\n    playDrop();\n  };\n\n  // --- existing highlight logic ---\n  useEffect(() => {\n    let mounted = true;\n    const appliedThemes = themes ?? {\n      light: 'github-light',\n      dark: 'catppuccin-frappe',\n    };\n\n    async function highlight() {\n      const lang = data.language ?? 'tsx';\n      const code = data.code ?? '';\n      const highlighter = await getHighlighter(lang, [appliedThemes.light, appliedThemes.dark]);\n      const html = await highlighter.codeToHtml(code, {\n        lang,\n        themes: {\n          light: appliedThemes.light,\n          dark: appliedThemes.dark,\n        },\n        defaultColor: 'light',\n      });\n      if (mounted) setHighlighted(html);\n    }\n\n    highlight();\n    return () => {\n      mounted = false;\n    };\n  }, [data.code, data.language, themes]);\n\n  const handleScroll = () => {\n    const el = containerRef.current;\n    if (!el) return;\n\n    const ratio = el.scrollTop / (el.scrollHeight - el.clientHeight);\n    const baseHeight = Math.max((el.clientHeight / el.scrollHeight) * el.clientHeight, 20);\n\n    setThumbTop(ratio * (el.clientHeight - baseHeight));\n    setThumbHeight(baseHeight);\n    setIsExpanded(true);\n\n    if (compressTimeout.current) clearTimeout(compressTimeout.current);\n    compressTimeout.current = setTimeout(() => {\n      setIsExpanded(false);\n    }, 500);\n  };\n\n  return (\n    <>\n      {rippleEffect == false ? (\n        <div className=\"relative\">\n          <div\n            ref={containerRef}\n            className={cn(\n              'overflow-visible not-prose bg-muted dark:bg-card/50  cursor-none', // â¬… cursor hidden\n              className,\n              codeBlockClassName,\n              darkModeClassNames,\n            )}\n            onScroll={handleScroll}\n            onMouseMove={handleMouseMove}\n            // onMouseEnter={handleMouseEnter}\n            // onMouseLeave={handleMouseLeave}\n            onClick={handleClick}\n            dangerouslySetInnerHTML={{ __html: highlighted }}\n            {...props}\n          />\n\n          {/* ðŸ’§ Custom cursor ball */}\n          {showBall && (\n            <motion.div\n              className=\"absolute  z-[9999]  w-4 h-4 rounded-full bg-gradient-to-r from-teal-400 to-teal-600 shadow-lg  blur-[1px]\"\n              style={{\n                x: springX,\n                y: springY,\n                scale: hovered ? 1 : 0,\n                opacity: hovered ? 1 : 0,\n              }}\n              initial={{ scale: 0, opacity: 0 }}\n              animate={{ scale: 1, opacity: 1 }}\n              exit={{ scale: 0, opacity: 0 }}\n              transition={{ duration: 0.5, ease: 'easeOut' }}\n            />\n          )}\n\n          {/* Smooth custom SVG scrollbar (existing) */}\n          <svg className=\"absolute top-0 right-0 h-full w-2 z-20\" style={{ pointerEvents: 'none' }}>\n            <motion.rect\n              width=\"8\"\n              rx=\"4\"\n              animate={{\n                y: thumbTop,\n                height: isExpanded ? thumbHeight + 10 : thumbHeight,\n                opacity: isExpanded ? 0.8 : 0.5,\n              }}\n              transition={{\n                type: 'spring',\n                stiffness: 180,\n                damping: 28,\n                mass: 0.8,\n              }}\n              className=\"fill-foreground/50\"\n              x=\"2\"\n            />\n          </svg>\n\n          <style jsx>{`\n            div {\n              overflow: auto;\n              -ms-overflow-style: none;\n              scrollbar-width: none;\n            }\n            div::-webkit-scrollbar {\n              display: none;\n            }\n          `}</style>\n        </div>\n      ) : (\n        <div className=\"relative\">\n          <RippleEffect>\n            <div\n              ref={containerRef}\n              className={cn(\n                'overflow-visible not-prose bg-muted dark:bg-card cursor-none ', // â¬… hide system cursor here too\n                className,\n                codeBlockClassName,\n                darkModeClassNames,\n              )}\n              onScroll={handleScroll}\n              onMouseMove={handleMouseMove}\n              // onMouseEnter={handleMouseEnter}\n              // onMouseLeave={handleMouseLeave}\n              onClick={handleClick}\n              dangerouslySetInnerHTML={{ __html: highlighted }}\n              {...props}\n            />\n          </RippleEffect>\n\n          {/* ðŸ’§ Ball cursor works with ripple too */}\n          {showBall && (\n            <motion.div\n              className=\"absolute  z-50  w-6 h-6 rounded-full bg-gradient-to-r from-teal-400 to-teal-600 shadow-lg pointer-events-none blur-[1px]\"\n              style={{\n                x: springX,\n                y: springY,\n                scale: hovered ? 1 : 0,\n                opacity: hovered ? 1 : 0,\n              }}\n              transition={{ duration: 0.5, ease: 'easeOut' }}\n            />\n          )}\n\n          <svg className=\"absolute top-0 right-0 h-full w-2 z-20\" style={{ pointerEvents: 'none' }}>\n            <motion.rect\n              width=\"8\"\n              rx=\"4\"\n              animate={{\n                y: thumbTop,\n                height: isExpanded ? thumbHeight + 2 : thumbHeight,\n                opacity: isExpanded ? 0.8 : 0.5,\n              }}\n              transition={{\n                type: 'spring',\n                stiffness: 180,\n                damping: 28,\n                mass: 0.8,\n              }}\n              className=\"fill-foreground/50\"\n              x=\"2\"\n            />\n          </svg>\n\n          <style jsx>{`\n            div {\n              overflow: auto;\n              -ms-overflow-style: none;\n              scrollbar-width: none;\n            }\n            div::-webkit-scrollbar {\n              display: none;\n            }\n          `}</style>\n        </div>\n      )}\n    </>\n  );\n}\n\ninterface RippleEffectProps {\n  children: React.ReactNode;\n  color?: string;\n  duration?: number;\n}\n\nexport default function RippleEffect({\n  children,\n  color = 'rgba(255, 255, 255, 0.4)',\n  duration = 0.6,\n}: RippleEffectProps) {\n  const [ripples, setRipples] = useState<{ id: number; x: number; y: number }[]>([]);\n\n  const createRipple = (e: MouseEvent<HTMLDivElement>) => {\n    const rect = e.currentTarget.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    const id = Date.now();\n\n    setRipples((prev) => [...prev, { id, x, y }]);\n    setTimeout(() => {\n      setRipples((prev) => prev.filter((r) => r.id !== id));\n    }, duration * 1000);\n  };\n\n  return (\n    <div onClick={createRipple} className=\"relative overflow-hidden cursor-pointer\">\n      {children}\n\n      {/* Ripple Layer */}\n      <AnimatePresence>\n        {ripples.map((ripple) => (\n          <motion.span\n            key={ripple.id}\n            initial={{ scale: 0, opacity: 0.6 }}\n            animate={{ scale: 9, opacity: 0 }}\n            exit={{ opacity: 0 }}\n            transition={{ duration, ease: 'easeOut' }}\n            className=\"absolute rounded-full backdrop-blur-2xl z-20\"\n            style={{\n              left: ripple.x,\n              top: ripple.y,\n              width: 40,\n              height: 40,\n              backgroundColor: color,\n              transform: 'translate(-50%, -50%)',\n              pointerEvents: 'none',\n            }}\n          />\n        ))}\n      </AnimatePresence>\n    </div>\n  );\n}\n\nexport {\n  CodeBlock,\n  CodeBlockHeader,\n  CodeBlockFilename,\n  CodeBlockCopyButton,\n  CodeBlockContent,\n  ButtonCopy,\n};\n",
      "type": "registry:component"
    },
    {
      "path": "components/demo/code-block-demo.tsx",
      "content": "import {\n  CodeBlock,\n  CodeBlockContent,\n  CodeBlockCopyButton,\n  CodeBlockFilename,\n  CodeBlockHeader,\n} from '@/components/code-block';\n\nexport function CodeBlockDemo() {\n  const data = {\n    code: `import React from \"react\";\n\nexport default function CodeBlock() {\n  return (\n    <div>\n      <h1>Hello, beautifull code block here! </h1>\n    </div>\n  )\n}`,\n    language: 'tsx',\n    fileName: 'components/code-block.tsx',\n  };\n\n  return (\n    <CodeBlock data={data}>\n      <CodeBlockHeader>\n        <CodeBlockFilename />\n        <CodeBlockCopyButton />\n      </CodeBlockHeader>\n      <CodeBlockContent />\n    </CodeBlock>\n  );\n}\n\n//Creator - Partharora\n//X - https://x.com/partharora9128\n",
      "type": "registry:component"
    }
  ]
}
