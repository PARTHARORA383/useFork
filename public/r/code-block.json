{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "code-block",
  "type": "registry:block",
  "title": "Animated Tabs",
  "description": "A reusable and customizable code block component built with React and Motion.",
  "files": [
    {
      "path": "components/code-block.tsx",
      "content": "\"use client\"\r\n\r\nimport { cn } from \"@/lib/cn\"\r\nimport { HTMLAttributes, useEffect, useState, useCallback, ReactNode, MouseEvent, useRef } from \"react\"\r\nimport { createHighlighter, type Highlighter } from \"shiki\"\r\nimport React from 'react'\r\nimport { Check, Copy, LoaderCircle } from \"lucide-react\"\r\nimport { AnimatePresence, motion } from \"motion/react\"\r\n\r\nlet highlighterPromise: Promise<Highlighter> | null = null\r\n\r\n\r\nasync function getHighlighter(lang: string, themes: string[]) {\r\n  if (!highlighterPromise) {\r\n    highlighterPromise = createHighlighter({\r\n      themes,\r\n      langs: [lang],\r\n    })\r\n  }\r\n  const highlighter = await highlighterPromise\r\n\r\n  // ensure language is loaded\r\n  if (!highlighter.getLoadedLanguages().includes(lang)) {\r\n    await highlighter.loadLanguage(lang as any)\r\n  }\r\n\r\n  return highlighter\r\n}\r\n\r\n\r\ntype CodeBlockDataProps = {\r\n  lang: string\r\n  code: string\r\n  themes?: { light: string; dark: string }\r\n}\r\n\r\nconst codeBlockClassName = cn(\r\n  \"mt-0 bg-card text-sm text-[17px]\",\r\n  \"[&_pre]:py-4\",\r\n  \"[&_.shiki]:!bg-transparent\",\r\n  \"[&_code]:w-full\",\r\n  \"[&_code]:grid\",\r\n  \"[&_code]:bg-transparent\",\r\n  \"[&_.line]:px-4\",\r\n  \"[&_.line]:w-full\",\r\n  \"[&_.line]:relative\"\r\n);\r\n\r\n\r\n\r\nconst darkModeClassNames = cn(\r\n  \"dark:[&_.shiki]:!text-[var(--shiki-dark)]\",\r\n  // \"dark:[&_.shiki]:!bg-[var(--shiki-dark-bg)]\",\r\n  \"dark:[&_.shiki]:![font-style:var(--shiki-dark-font-style)]\",\r\n  \"dark:[&_.shiki]:![font-weight:var(--shiki-dark-font-weight)]\",\r\n  \"dark:[&_.shiki]:![text-decoration:var(--shiki-dark-text-decoration)]\",\r\n  \"dark:[&_.shiki_span]:!text-[var(--shiki-dark)]\",\r\n  \"dark:[&_.shiki_span]:![font-style:var(--shiki-dark-font-style)]\",\r\n  \"dark:[&_.shiki_span]:![font-weight:var(--shiki-dark-font-weight)]\",\r\n  \"dark:[&_.shiki_span]:![text-decoration:var(--shiki-dark-text-decoration)]\"\r\n);\r\n\r\n\r\nexport async function codeToHtml({\r\n  code,\r\n  lang = \"tsx\",\r\n  themes = { light: \"github-light\", dark: \"catppuccin-frappe\" },\r\n}: CodeBlockDataProps) {\r\n  const highlighter = await getHighlighter(lang, [themes.light, themes.dark])\r\n  return highlighter.codeToHtml(code, {\r\n    lang,\r\n    themes: {\r\n      dark: themes.dark,\r\n      light: themes.light,\r\n    },\r\n    defaultColor: false,\r\n    cssVariablePrefix: \"--_s-\",\r\n  })\r\n}\r\n\r\n\r\n\r\ntype CodeBlockData = {\r\n  code: string,\r\n  language?: string\r\n  fileName?: string\r\n}\r\n\r\n\r\nexport type CodeBlockContextType = {\r\n  data: CodeBlockData\r\n}\r\n\r\nconst CodeContext = React.createContext<CodeBlockContextType | undefined>(undefined)\r\n\r\nexport const useCodeContext = () => {\r\n  const context = React.useContext(CodeContext);\r\n  if (!context) throw new Error(\"Data must be passed as an object in CodeBlock\")\r\n\r\n  return context;\r\n}\r\n\r\ntype CodeBlockProps = HTMLAttributes<HTMLDivElement> & {\r\n  children?: React.ReactNode,\r\n  data: CodeBlockData\r\n}\r\n\r\nfunction CodeBlock({ children, className, data, ...props }: CodeBlockProps) {\r\n  return (\r\n    <CodeContext.Provider value={{ data }} >\r\n      <div\r\n        className={cn(\"relative rounded-lg border border-border bg-card\", className)}\r\n        {...props}\r\n      >\r\n        {children}\r\n      </div>\r\n    </CodeContext.Provider>\r\n  )\r\n}\r\n\r\n\r\nexport type CodeBlockHeaderProps = HTMLAttributes<HTMLDivElement>\r\n\r\nfunction CodeBlockHeader({ children, className, ...props }: CodeBlockHeaderProps) {\r\n  return (\r\n    <div\r\n      className={cn(\r\n        \"flex items-center justify-between  border-b border-border px-3 py-2 font-medium\",\r\n        className\r\n      )}\r\n      {...props}\r\n    >\r\n      {children}\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction CodeBlockFilename({\r\n  className,\r\n  ...props\r\n}: HTMLAttributes<HTMLDivElement>) {\r\n  const { data } = useCodeContext()\r\n\r\n  return (\r\n    <div className={cn(\"truncate text-sm opacity-80 cursor-default\", className)} {...props}>\r\n      {data.fileName ?? \"filename.tsx\"}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport interface ButtonCopyProps {\r\n  onCopy?: () => Promise<void> | void\r\n  idleIcon?: ReactNode\r\n  loadingIcon?: ReactNode\r\n  successIcon?: ReactNode\r\n  className?: string\r\n  duration?: number\r\n  loadingDuration?: number\r\n  disabled?: boolean\r\n}\r\n\r\nconst defaultIcons = {\r\n  idle: <Copy size={14} />,\r\n  loading: <LoaderCircle size={14} className=\"animate-spin\" />,\r\n  success: <Check size={14} />,\r\n}\r\n\r\nfunction ButtonCopy({\r\n  onCopy,\r\n  idleIcon = defaultIcons.idle,\r\n  loadingIcon = defaultIcons.loading,\r\n  successIcon = defaultIcons.success,\r\n  className = \"\",\r\n  duration = 1000,\r\n  loadingDuration = 500,\r\n  disabled = false,\r\n}: ButtonCopyProps) {\r\n  const [buttonState, setButtonState] = useState<\r\n    \"idle\" | \"loading\" | \"success\"\r\n  >(\"idle\")\r\n  const handleClick = useCallback(async () => {\r\n    setButtonState(\"loading\")\r\n    if (onCopy) await onCopy()\r\n    setTimeout(() => {\r\n      setButtonState(\"success\")\r\n    }, loadingDuration)\r\n    setTimeout(() => {\r\n      setButtonState(\"idle\")\r\n    }, loadingDuration + duration)\r\n  }, [onCopy, loadingDuration, duration])\r\n\r\n  const icons = {\r\n    idle: idleIcon,\r\n    loading: loadingIcon,\r\n    success: successIcon,\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"relative flex justify-center\">\r\n        <button\r\n          type=\"button\"\r\n          className={`bg-background relative w-auto cursor-pointer overflow-hidden rounded-full border p-2 disabled:opacity-50 ${className}`}\r\n          disabled={buttonState !== \"idle\" || disabled}\r\n          onClick={handleClick}\r\n          aria-label={buttonState === \"loading\" ? \"Copying...\" : \"Copy\"}\r\n        >\r\n          <AnimatePresence mode=\"popLayout\" initial={false}>\r\n            <motion.span\r\n              transition={{ type: \"spring\", duration: 0.3, bounce: 0 }}\r\n              initial={{ opacity: 0, y: -25, filter: \"blur(10px)\" }}\r\n              animate={{ opacity: 1, y: 0, filter: \"blur(0px)\" }}\r\n              exit={{ opacity: 0, y: 25, filter: \"blur(10px)\" }}\r\n              key={buttonState}\r\n              className=\"flex w-full items-center justify-center\"\r\n            >\r\n              {icons[buttonState]}\r\n            </motion.span>\r\n          </AnimatePresence>\r\n        </button>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\n\r\nfunction CodeBlockCopyButton() {\r\n  const { data } = useCodeContext()\r\n  const [copied, setCopied] = useState(false)\r\n\r\n  const handleCopy = async () => {\r\n    await navigator.clipboard.writeText(data.code)\r\n    setCopied(true)\r\n    setTimeout(() => setCopied(false), 1500)\r\n  }\r\n\r\n  return (\r\n    <ButtonCopy\r\n      onCopy={handleCopy}\r\n      className=\"text-xs opacity-70 hover:opacity-100 transition\"\r\n    />\r\n  )\r\n}\r\n\r\n\r\n// ──────────────────────────────\r\nexport type CodeBlockContentProps = HTMLAttributes<HTMLDivElement> & {\r\n  themes?: { light: string; dark: string }\r\n  rippleEffect?: boolean\r\n}\r\n\r\n\r\nfunction CodeBlockContent({\r\n  className,\r\n  themes,\r\n  rippleEffect,\r\n  ...props\r\n}: CodeBlockContentProps) {\r\n  const [highlighted, setHighlighted] = useState<string>(\"\")\r\n  const { data } = useCodeContext()\r\n  const containerRef = React.useRef<HTMLDivElement>(null)\r\n  const [scrollThumbTop, setScrollThumbTop] = useState(0)\r\n  const [scrollThumbHeight, setScrollThumbHeight] = useState(20)\r\n  const [isScrolling, setIsScrolling] = useState(false)\r\n  const [scrollActivity, setScrollActivity] = useState(0)\r\n  const scrollTimeout = useRef<NodeJS.Timeout | null>(null)\r\n  const [thumbTop, setThumbTop] = useState(0)\r\n  const [thumbHeight, setThumbHeight] = useState(20)\r\n  const [isExpanded, setIsExpanded] = useState(false)\r\n  const compressTimeout = useRef<NodeJS.Timeout | null>(null)\r\n\r\n  useEffect(() => {\r\n    let mounted = true\r\n    const appliedThemes = themes ?? {\r\n      light: \"github-light\",\r\n      dark: \"catppuccin-frappe\",\r\n    }\r\n\r\n    async function highlight() {\r\n      const lang = data.language ?? \"tsx\"\r\n      const code = data.code ?? \"\"\r\n      const highlighter = await getHighlighter(lang, [\r\n        appliedThemes.light,\r\n        appliedThemes.dark,\r\n      ])\r\n      const html = await highlighter.codeToHtml(code, {\r\n        lang,\r\n        themes: {\r\n          light: appliedThemes.light,\r\n          dark: appliedThemes.dark,\r\n        },\r\n        defaultColor: \"light\",\r\n      })\r\n      if (mounted) setHighlighted(html)\r\n    }\r\n\r\n    highlight()\r\n    return () => {\r\n      mounted = false\r\n    }\r\n  }, [data.code, data.language, themes])\r\n\r\n\r\n\r\n  const handleScroll = () => {\r\n    const el = containerRef.current\r\n    if (!el) return\r\n\r\n    const ratio = el.scrollTop / (el.scrollHeight - el.clientHeight)\r\n    const baseHeight = Math.max((el.clientHeight / el.scrollHeight) * el.clientHeight, 20)\r\n\r\n    setThumbTop(ratio * (el.clientHeight - baseHeight))\r\n    setThumbHeight(baseHeight)\r\n\r\n    // Expand thumb while scrolling\r\n    setIsExpanded(true)\r\n\r\n    // Clear previous timeout\r\n    if (compressTimeout.current) clearTimeout(compressTimeout.current)\r\n\r\n    // Compress back after 3s of no scroll\r\n    compressTimeout.current = setTimeout(() => {\r\n      setIsExpanded(false)\r\n    }, 500)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {rippleEffect == false ?\r\n        (\r\n          <div>\r\n\r\n            <div\r\n              ref={containerRef}\r\n              className={cn(\r\n                \"relative overflow-auto not-prose bg-muted dark:bg-card/50\",\r\n                className,\r\n                codeBlockClassName,\r\n                darkModeClassNames\r\n              )}\r\n              onScroll={handleScroll}\r\n              dangerouslySetInnerHTML={{ __html: highlighted }}\r\n              {...props}\r\n            />\r\n\r\n            {/* Smooth custom SVG scrollbar on right */}\r\n            <svg\r\n              className=\"absolute top-0 right-0 h-full w-2 z-20\"\r\n              style={{ pointerEvents: \"none\" }}\r\n            >\r\n              <motion.rect\r\n                width=\"8\"\r\n                rx=\"4\"\r\n                animate={{\r\n                  y: thumbTop,\r\n                  height: isExpanded ? thumbHeight + 10 : thumbHeight,\r\n                  opacity: isExpanded ? 0.8 : 0.5,\r\n                }}\r\n                transition={{\r\n                  type: \"spring\",\r\n                  stiffness: 180,\r\n                  damping: 28,\r\n                  mass: 0.8,\r\n                }}\r\n                className=\"fill-foreground/50\"\r\n                x=\"2\"\r\n              />\r\n\r\n            </svg>\r\n\r\n            <style jsx>{`\r\n          div {\r\n            overflow: auto;\r\n            -ms-overflow-style: none;\r\n            scrollbar-width: none;\r\n            }\r\n            div::-webkit-scrollbar {\r\n              display: none;\r\n              }\r\n              `}</style>\r\n          </div>\r\n        )\r\n\r\n        : (<RippleEffect>\r\n          <div\r\n            ref={containerRef}\r\n            className={cn(\r\n              \"relative overflow-auto not-prose bg-muted dark:bg-card\",\r\n              className,\r\n              codeBlockClassName,\r\n              darkModeClassNames\r\n            )}\r\n            onScroll={handleScroll}\r\n            dangerouslySetInnerHTML={{ __html: highlighted }}\r\n            {...props}\r\n          />\r\n\r\n          <svg\r\n            className=\"absolute top-0 right-0 h-full w-2 z-20\"\r\n            style={{ pointerEvents: \"none\" }}\r\n          >\r\n            <motion.rect\r\n              width=\"8\"\r\n              rx=\"4\"\r\n              animate={{\r\n                y: thumbTop,\r\n                height: isExpanded ? thumbHeight + 2 : thumbHeight,\r\n                opacity: isExpanded ? 0.8 : 0.5,\r\n              }}\r\n              transition={{\r\n                type: \"spring\",\r\n                stiffness: 180,\r\n                damping: 28,\r\n                mass: 0.8,\r\n              }}\r\n              className=\"fill-foreground/50\"\r\n              x=\"2\"\r\n            />\r\n\r\n\r\n\r\n          </svg>\r\n\r\n          <style jsx>{`\r\n          div {\r\n            overflow: auto;\r\n            -ms-overflow-style: none;\r\n            scrollbar-width: none;\r\n            }\r\n            div::-webkit-scrollbar {\r\n              display: none;\r\n              }\r\n              `}</style>\r\n        </RippleEffect>)\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\n\r\ninterface RippleEffectProps {\r\n  children: React.ReactNode\r\n  color?: string\r\n  duration?: number\r\n}\r\n\r\nexport default function RippleEffect({\r\n  children,\r\n  color = \"rgba(255, 255, 255, 0.4)\",\r\n  duration = 0.6,\r\n}: RippleEffectProps) {\r\n  const [ripples, setRipples] = useState<{ id: number; x: number; y: number }[]>([])\r\n\r\n  const createRipple = (e: MouseEvent<HTMLDivElement>) => {\r\n    const rect = e.currentTarget.getBoundingClientRect()\r\n    const x = e.clientX - rect.left\r\n    const y = e.clientY - rect.top\r\n    const id = Date.now()\r\n\r\n    setRipples(prev => [...prev, { id, x, y }])\r\n    setTimeout(() => {\r\n      setRipples(prev => prev.filter(r => r.id !== id))\r\n    }, duration * 1000)\r\n  }\r\n\r\n  return (\r\n    <div\r\n      onClick={createRipple}\r\n      className=\"relative overflow-hidden cursor-pointer\"\r\n    >\r\n      {children}\r\n\r\n      {/* Ripple Layer */}\r\n      <AnimatePresence>\r\n        {ripples.map(ripple => (\r\n          <motion.span\r\n            key={ripple.id}\r\n            initial={{ scale: 0, opacity: 0.6 }}\r\n            animate={{ scale: 9, opacity: 0 }}\r\n            exit={{ opacity: 0 }}\r\n            transition={{ duration, ease: \"easeOut\" }}\r\n            className=\"absolute rounded-full backdrop-blur-2xl z-20\"\r\n            style={{\r\n              left: ripple.x,\r\n              top: ripple.y,\r\n              width: 40,\r\n              height: 40,\r\n              backgroundColor: color,\r\n              transform: \"translate(-50%, -50%)\",\r\n              pointerEvents: \"none\",\r\n            }}\r\n          />\r\n        ))}\r\n      </AnimatePresence>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport {\r\n  CodeBlock,\r\n  CodeBlockHeader,\r\n  CodeBlockFilename,\r\n  CodeBlockCopyButton,\r\n  CodeBlockContent,\r\n  ButtonCopy\r\n}\r\n",
      "type": "registry:component"
    },
    {
      "path": "components/demo/code-block-demo.tsx",
      "content": "\r\nimport { CodeBlock , CodeBlockContent , CodeBlockCopyButton , CodeBlockFilename , CodeBlockHeader} from \"@/components/code-block\";\r\n\r\nexport function CodeBlockDemo(){\r\n\r\nconst data = {\r\n  code: `import React from \"react\";\r\n\r\nexport default function CodeBlock() {\r\n  return (\r\n    <div>\r\n      <h1>Hello, beautifull code block here! </h1>\r\n    </div>\r\n  )\r\n}`,\r\n  language: \"tsx\",\r\n  fileName: \"components/code-block.tsx\"\r\n}\r\n\r\n\r\n  return (\r\n      <CodeBlock data={data}>\r\n        <CodeBlockHeader>\r\n          <CodeBlockFilename/>\r\n          <CodeBlockCopyButton/>\r\n        </CodeBlockHeader>\r\n        <CodeBlockContent/>\r\n      </CodeBlock>\r\n  )\r\n}",
      "type": "registry:component"
    }
  ]
}