{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "parallax-images",
  "type": "registry:block",
  "title": "Parallax Images",
  "description": "An interactive parallax showcase where images drift in dual lanes, elegantly responding to cursor movement and adding a captivating sense of depth. A recreation from the landonorris website.",
  "dependencies": ["motion"],
  "files": [
    {
      "path": "components/parallax-images.tsx",
      "content": "'use client';\n\nimport { useRef, useState } from 'react';\nimport { motion, useMotionValue, useSpring, useTransform } from 'motion/react';\n\ninterface ImageProps {\n  src: string;\n}\n\ninterface Props {\n  leftLane?: ImageProps[];\n  rightLane?: ImageProps[];\n  maxOffset?: number;\n  imageWidth?: number;\n  imageHeight?: number;\n}\n\nexport function MouseParallaxImages({\n  leftLane,\n  rightLane,\n  maxOffset = 40,\n  imageWidth = 300,\n  imageHeight = 400,\n}: Props) {\n  const topSrc = 'https://i.pinimg.com/736x/fa/2e/b8/fa2eb8fe7012d991cfb06b9ff58ebf2b.jpg';\n  const bottomSrc = 'https://i.pinimg.com/1200x/28/ae/db/28aedb0c63b1cdf0739e90e08653af0b.jpg';\n  const rightSrc = 'https://i.pinimg.com/1200x/58/85/d1/5885d1f6220c22bd6018c3451a3cc23d.jpg';\n  const leftSrc = 'https://i.pinimg.com/736x/f7/38/ac/f738ace16139857c6bbb173120bc5b84.jpg';\n\n  const left = leftLane ?? [{ src: topSrc }, { src: bottomSrc }];\n  const right = rightLane ?? [{ src: leftSrc }, { src: rightSrc }];\n\n  const containerRef = useRef<HTMLDivElement | null>(null);\n  const raw = useMotionValue(0);\n  const [activeIndex, setActiveIndex] = useState<number | null>(null);\n\n  const smooth = useSpring(raw, {\n    stiffness: 40,\n    damping: 10,\n  });\n\n  const translateY = useTransform(smooth, (v) => -v * maxOffset);\n  const reverseY = useTransform(smooth, (v) => v * maxOffset);\n\n  function handleMouseMove(e: React.MouseEvent) {\n    const el = containerRef.current;\n    if (!el) return;\n    const rect = el.getBoundingClientRect();\n    const y = e.clientY - rect.top;\n    const norm = (y / rect.height - 0.5) * 2;\n    raw.set(norm);\n  }\n\n  function handleMouseLeave() {\n    raw.set(0);\n    setActiveIndex(null);\n  }\n\n  return (\n    <div\n      className=\"w-full h-full flex items-center justify-center p-4\"\n      style={{ touchAction: 'pan-left' }}\n    >\n      <div\n        ref={containerRef}\n        onMouseMove={handleMouseMove}\n        onMouseLeave={handleMouseLeave}\n        className=\"relative w-full h-full flex items-center justify-center gap-12 overflow-hidden\"\n      >\n        <motion.div className=\"flex flex-col gap-6 items-center\">\n          {left.map((item, index) => (\n            <motion.div style={{ y: translateY }} className=\"flex flex-col gap-6 items-center \">\n              <HoverImage\n                src={item.src}\n                index={index}\n                imageWidth={imageWidth}\n                imageHeight={imageHeight}\n                activeIndex={activeIndex}\n                setActiveIndex={setActiveIndex}\n              />\n            </motion.div>\n          ))}\n        </motion.div>\n\n        <motion.div className=\"flex flex-col gap-6 items-center\">\n          {right.map((item, index) => (\n            <motion.div style={{ y: reverseY }} className=\"flex flex-col gap-6 items-center \">\n              <HoverImage\n                src={item.src}\n                index={index}\n                imageWidth={imageWidth}\n                imageHeight={imageHeight}\n                activeIndex={activeIndex}\n                setActiveIndex={setActiveIndex}\n              />\n            </motion.div>\n          ))}\n        </motion.div>\n      </div>\n    </div>\n  );\n}\n\ninterface HoverImageProps {\n  src: string;\n  index: number;\n  imageWidth: number;\n  imageHeight: number;\n  activeIndex: number | null;\n  setActiveIndex: React.Dispatch<React.SetStateAction<number | null>>;\n}\n\nfunction HoverImage({\n  src,\n  index,\n  imageHeight,\n  imageWidth,\n  activeIndex,\n  setActiveIndex,\n}: HoverImageProps) {\n  return (\n    <motion.div\n      className=\"relative p-0 m-0 overflow-hidden shadow-lg \"\n      style={{ width: imageWidth, height: imageHeight }}\n      onMouseEnter={() => setActiveIndex(index)}\n    >\n      {/* Image  */}\n      <motion.img\n        src={src}\n        alt={`img-${index}`}\n        className=\"absolute inset-0 p-0 m-0 h-full w-full object-cover transition-transform duration-700 ease-in-out\"\n      />\n\n      {/* Overlay for the image */}\n      <motion.div\n        initial={{ y: 0 }}\n        animate={{\n          y: activeIndex === index ? '-100%' : '0%',\n        }}\n        transition={{ duration: 0.8, ease: 'easeInOut' }}\n        className=\"absolute inset-0 dark:bg-[#161616] bg-[#fcfcfc] mix-blend-saturation\"\n      />\n    </motion.div>\n  );\n}\n\n//Creator - Partharora\n//X - https://x.com/partharora9128\n",
      "type": "registry:component"
    },
    {
      "path": "components/demo/parallax-images-demo.tsx",
      "content": "import { MouseParallaxImages } from '@/components/parallax-images';\n\nexport function MouseParallaxImagesDemo() {\n  const left = [\n    { src: 'https://i.pinimg.com/736x/fa/2e/b8/fa2eb8fe7012d991cfb06b9ff58ebf2b.jpg' },\n    { src: 'https://i.pinimg.com/1200x/28/ae/db/28aedb0c63b1cdf0739e90e08653af0b.jpg' },\n  ];\n\n  const right = [\n    { src: 'https://i.pinimg.com/736x/f7/38/ac/f738ace16139857c6bbb173120bc5b84.jpg' },\n    { src: 'https://i.pinimg.com/1200x/58/85/d1/5885d1f6220c22bd6018c3451a3cc23d.jpg' },\n  ];\n\n  return (\n    <div className=\"w-full h-full\">\n      <MouseParallaxImages leftLane={left} rightLane={right} />\n    </div>\n  );\n}\n\n//Creator - Partharora\n//X - https://x.com/partharora9128\n",
      "type": "registry:component"
    }
  ]
}
