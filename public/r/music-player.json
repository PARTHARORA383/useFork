{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "music-player",
  "type": "registry:block",
  "title": "Music Player",
  "description": "A customizable music player built with React and Framer Motion, supporting animated transitions and hover effects.",
  "dependencies": [
    "motion",
    "lucide-react"
  ],
  "files": [
    {
      "path": "components/music-player.tsx",
      "content": "// \"use client\"\n\n// import { AnimatePresence, motion } from \"motion/react\"\n// import { Play, Pause, SkipBack, SkipForward } from \"lucide-react\"\n// import React, {\n//   createContext,\n//   useContext,\n//   useEffect,\n//   useState,\n//   ReactNode,\n//   HTMLAttributes,\n//   SetStateAction,\n// } from \"react\"\n// import NoiseWrapper from \"./noise-wrapper\"\n\n// /* ---------- TYPES ---------- */\n// export interface TrackProps {\n//   id: string\n//   title: string\n//   artist: string\n//   url: string\n//   cover?: string\n//   duration?: number\n//   metadata?: Record<string, any>\n// }\n\n// interface TracksContextProps {\n//   tracks: TrackProps[]\n//   currentTrackIndex: number\n//   setTracks: React.Dispatch<SetStateAction<TrackProps[]>>\n//   setCurrentTrackIndex: React.Dispatch<SetStateAction<number>>\n//   isPaused: boolean\n//   setIsPaused: React.Dispatch<SetStateAction<boolean>>\n// }\n\n// const TracksContext = createContext<TracksContextProps | null>(null)\n// export const useTracks = () => {\n//   const ctx = useContext(TracksContext)\n//   if (!ctx) throw new Error(\"useTracks must be used inside MusicPlayer\")\n//   return ctx\n// }\n\n// export interface MusicButtonProps extends HTMLAttributes<HTMLDivElement> {\n//   icon?: ReactNode\n//   width?: number\n//   height?: number\n//   onClick?: () => void\n// }\n\n// export const MusicButton = ({\n//   icon,\n//   width = 40,\n//   height = 40,\n//   onClick,\n//   className,\n//   ...props\n// }: MusicButtonProps) => (\n//   <NoiseWrapper className=\"rounded-full\">\n//     <motion.div\n//       className={`relative flex items-center justify-center rounded-full border-2 border-transparent hover:border-sky-500 hover:bg-muted2 cursor-pointer transition-colors duration-200 ${className ?? \"\"}`}\n//       style={{ width, height }}\n//       onClick={onClick}\n//       {...props}\n//     >\n//       {icon}\n//     </motion.div>\n//   </NoiseWrapper>\n// )\n\n// /* ---------- MUSIC DETAILS ---------- */\n// export const MusicDetails = ({ hovered }: { hovered: boolean }) => {\n//   const { tracks, currentTrackIndex } = useTracks()\n//   const track = tracks[currentTrackIndex]\n//   if (!track) return null\n\n//   const coverImg =\n//     track.cover ||\n//     \"https://i.pinimg.com/736x/49/2d/e1/492de1d0dd1007de094678cb86c81dfa.jpg\"\n\n//   return (\n//     <AnimatePresence>\n//       <motion.div\n//         key={track.id}\n//         initial={{ opacity: 0, x: -40, filter: \"blur(12px)\" }}\n//         animate={{\n//           opacity: 1,\n//           x: 0,\n//           filter: \"blur(0px)\",\n//           transition: { duration: 0.6, ease: [0.25, 0.1, 0.25, 1] },\n//         }}\n//         exit={{\n//           opacity: 0,\n//           x: 40,\n//           filter: \"blur(12px)\",\n//           transition: { duration: 0.4, ease: \"easeInOut\" },\n//         }}\n//         className=\"flex flex-col items-center justify-center max-w-xs min-w-xs left-1/2 -translate-x-1/2 z-50 absolute bottom-full mb-2 rounded-xl border overflow-hidden shadow-lg\"\n//         style={{ width: \"180px\", height: \"200px\" }}\n//       >\n//         <div\n//           className=\"absolute inset-0 bg-cover bg-center scale-110\"\n//           style={{\n//             backgroundImage: `url(${coverImg})`,\n//             filter: \"blur(25px) brightness(0.6)\",\n//           }}\n//         />\n//         <div className=\"absolute inset-0 bg-black/40\" />\n//         <div className=\"relative z-10 flex flex-col items-center justify-center gap-2 px-3 py-4\">\n//           <motion.img\n//             src={coverImg}\n//             alt={track.title}\n//             width={100}\n//             height={100}\n//             className=\"rounded-lg border border-gray-400 shadow-md object-cover\"\n//             animate={{ rotate: hovered ? 0 : 360 }}\n//             transition={{ repeat: Infinity, duration: 4, ease: \"linear\" }}\n//           />\n//           <motion.div\n//             className=\"text-sm font-semibold text-white text-center\"\n//             initial={{ opacity: 0, y: 10 }}\n//             animate={{ opacity: 1, y: 0 }}\n//             transition={{ delay: 0.2, duration: 0.3 }}\n//           >\n//             {track.title}\n//           </motion.div>\n//           <motion.div\n//             className=\"text-xs text-gray-300 text-center\"\n//             initial={{ opacity: 0, y: 10 }}\n//             animate={{ opacity: 1, y: 0 }}\n//             transition={{ delay: 0.3, duration: 0.3 }}\n//           >\n//             {track.artist}\n//           </motion.div>\n//         </div>\n//       </motion.div>\n//     </AnimatePresence>\n//   )\n// }\n\n// export const DefaultControls = () => {\n//   const { isPaused, setIsPaused, tracks, currentTrackIndex, setCurrentTrackIndex } = useTracks()\n//   const [hovered, setHovered] = useState(false)\n//   const coverImg =\n//     tracks[currentTrackIndex]?.cover ||\n//     \"https://i.pinimg.com/736x/49/2d/e1/492de1d0dd1007de094678cb86c81dfa.jpg\"\n\n//   const handleNext = () => {\n//     setCurrentTrackIndex((prev) => (prev + 1) % tracks.length)\n//   }\n\n//   const handlePrev = () => {\n//     setCurrentTrackIndex((prev) =>\n//       prev === 0 ? tracks.length - 1 : prev - 1\n//     )\n//   }\n\n//   return (\n//     <div className=\"flex flex-col items-center justify-center gap-4 relative\">\n//       <AnimatePresence mode=\"wait\">\n//         {hovered && (\n//           <motion.div\n//             key=\"details\"\n//             initial={{ opacity: 0 }}\n//             animate={{ opacity: 1 }}\n//             exit={{ opacity: 0 }}\n//             transition={{ duration: 0.2 }}\n//           >\n//             <MusicDetails hovered={hovered} />\n//           </motion.div>\n//         )}\n//       </AnimatePresence>\n//       <NoiseWrapper className=\"rounded-xl\">\n//         <motion.div\n//           className=\"flex items-center justify-center border rounded-xl w-xs p-1 gap-4\"\n//           onMouseEnter={() => setHovered(true)}\n//           onMouseLeave={() => setHovered(false)}\n//         >\n//           <MusicButton icon={<SkipBack size={20} />} onClick={handlePrev} />\n//           <div className=\"relative w-[45px] h-[45px]\">\n//             <AnimatePresence>\n//               {isPaused ? (\n//                 <motion.div\n//                   key=\"play\"\n//                   initial={{ opacity: 0, scale: 0 }}\n//                   animate={{ opacity: 1, scale: 1 }}\n//                   exit={{ opacity: 0, scale: 0 }}\n//                   transition={{ duration: 0.3 }}\n//                   className=\"absolute inset-0 flex items-center justify-center\"\n//                 >\n//                   <MusicButton\n//                     width={45}\n//                     height={45}\n//                     icon={<Play size={24} />}\n//                     onClick={() => setIsPaused(false)}\n//                   />\n//                 </motion.div>\n//               ) : (\n//                 <motion.div\n//                   key=\"pause\"\n//                   initial={{ opacity: 0, scale: 0 }}\n//                   animate={{ opacity: 1, scale: 1 }}\n//                   exit={{ opacity: 0, scale: 0 }}\n//                   transition={{ duration: 0.3 }}\n//                   className=\"absolute inset-0 flex items-center justify-center\"\n//                 >\n//                   <MusicButton\n//                     width={45}\n//                     height={45}\n//                     icon={\n//                       <motion.img\n//                         src={coverImg}\n//                         alt=\"Playing Track\"\n//                         className=\"rounded-full border-4 border-gray-400 shadow-lg object-cover\"\n//                         animate={{ rotate: hovered ? 0 : 360 }}\n//                         transition={{\n//                           repeat: Infinity,\n//                           duration: 4,\n//                           ease: \"linear\",\n//                         }}\n//                       />\n//                     }\n//                     onClick={() => setIsPaused(true)}\n//                   />\n//                 </motion.div>\n//               )}\n//             </AnimatePresence>\n//           </div>\n//           <MusicButton icon={<SkipForward size={20} />} onClick={handleNext} />\n//         </motion.div>\n//       </NoiseWrapper>\n//     </div>\n//   )\n// }\n\n// interface MusicPlayerProps {\n//   data: TrackProps[]\n//   children?: ReactNode\n// }\n\n// export const MusicPlayer = ({ data, children }: MusicPlayerProps) => {\n//   const [tracks, setTracks] = useState<TrackProps[]>([])\n//   const [currentTrackIndex, setCurrentTrackIndex] = useState(0)\n//   const [isPaused, setIsPaused] = useState(true)\n\n//   useEffect(() => {\n//     setTracks(data)\n//   }, [data])\n\n//   const contextValue: TracksContextProps = {\n//     tracks,\n//     setTracks,\n//     currentTrackIndex,\n//     setCurrentTrackIndex,\n//     isPaused,\n//     setIsPaused,\n//   }\n\n//   return (\n//     <TracksContext.Provider value={contextValue}>\n//       {children ? children : <DefaultControls />}\n//     </TracksContext.Provider>\n//   )\n// }\n",
      "type": "registry:component"
    },
    {
      "path": "components/demo/music-player-demo.tsx",
      "content": "// \"use client\"\n\n// import { MusicPlayer } from \"@/components/music-player\"\n\n// export function MusicPlayerDemo (){\n\n//   const tracks = [\n//   {\n//     id: \"1\",\n//     title: \"Lost in Space\",\n//     artist: \"Synth Nova\",\n//     url: \"/songs/lost-in-space.mp3\",\n//     cover: \"https://i.pinimg.com/736x/49/2d/e1/492de1d0dd1007de094678cb86c81dfa.jpg\",\n//   },\n//   {\n//     id: \"2\",\n//     title: \"Midnight Mirage\",\n//     artist: \"Shadow Echo\",\n//     url: \"/songs/midnight-mirage.mp3\",\n//     cover: \"https://i.pinimg.com/736x/73/e3/c1/73e3c183f2e948e62ea9e8fce20dffc8.jpg\",\n//   },\n//   {\n//     id: \"3\",\n//     title: \"Streetlight Whispers\",\n//     artist: \"Noir Waves\",\n//     url: \"/songs/streetlight-whispers.mp3\",\n//     cover: \"https://i.pinimg.com/1200x/a6/e1/34/a6e1347b23f882e5351bb303bda93b09.jpg\",\n//   },\n//   {\n//     id: \"4\",\n//     title: \"Under Neon Shadows\",\n//     artist: \"Velvet Drift\",\n//     url: \"/songs/under-neon-shadows.mp3\",\n//     cover: \"https://i.pinimg.com/1200x/d5/7d/34/d57d343d76214e7a20a884dd433936a9.jpg\",\n//   },\n//   {\n//     id: \"5\",\n//     title: \"Echoes In The Alley\",\n//     artist: \"Midnight Static\",\n//     url: \"/songs/echoes-in-the-alley.mp3\",\n//     cover: \"https://i.pinimg.com/736x/3f/54/96/3f549606a9ce899a713dd1310ef02d0d.jpg\",\n//   },\n// ]\n\n//   return (\n//     <MusicPlayer data={tracks}/>\n//   )\n\n// }\n",
      "type": "registry:component"
    }
  ]
}