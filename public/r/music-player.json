{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "music-player",
  "type": "registry:block",
  "title": "Music Player",
  "description": "A customizable music player built with React and Framer Motion, supporting animated transitions and hover effects.",
  "dependencies": [
    "motion",
    "lucide-react"
  ],
  "files": [
    {
      "path": "components/music-player.tsx",
      "content": "\"use client\"\r\n\r\nimport { AnimatePresence, motion } from \"motion/react\"\r\nimport { Play, Pause, SkipBack, SkipForward } from \"lucide-react\"\r\nimport React, {\r\n  createContext,\r\n  useContext,\r\n  useEffect,\r\n  useState,\r\n  ReactNode,\r\n  HTMLAttributes,\r\n  SetStateAction,\r\n} from \"react\"\r\nimport NoiseWrapper from \"./noise-wrapper\"\r\n\r\n/* ---------- TYPES ---------- */\r\nexport interface TrackProps {\r\n  id: string\r\n  title: string\r\n  artist: string\r\n  url: string\r\n  cover?: string\r\n  duration?: number\r\n  metadata?: Record<string, any>\r\n}\r\n\r\ninterface TracksContextProps {\r\n  tracks: TrackProps[]\r\n  currentTrackIndex: number\r\n  setTracks: React.Dispatch<SetStateAction<TrackProps[]>>\r\n  setCurrentTrackIndex: React.Dispatch<SetStateAction<number>>\r\n  isPaused: boolean\r\n  setIsPaused: React.Dispatch<SetStateAction<boolean>>\r\n}\r\n\r\nconst TracksContext = createContext<TracksContextProps | null>(null)\r\nexport const useTracks = () => {\r\n  const ctx = useContext(TracksContext)\r\n  if (!ctx) throw new Error(\"useTracks must be used inside MusicPlayer\")\r\n  return ctx\r\n}\r\n\r\nexport interface MusicButtonProps extends HTMLAttributes<HTMLDivElement> {\r\n  icon?: ReactNode\r\n  width?: number\r\n  height?: number\r\n  onClick?: () => void\r\n}\r\n\r\nexport const MusicButton = ({\r\n  icon,\r\n  width = 40,\r\n  height = 40,\r\n  onClick,\r\n  className,\r\n  ...props\r\n}: MusicButtonProps) => (\r\n  <NoiseWrapper className=\"rounded-full\">\r\n    <motion.div\r\n      className={`relative flex items-center justify-center rounded-full border-2 border-transparent hover:border-sky-500 hover:bg-muted2 cursor-pointer transition-colors duration-200 ${className ?? \"\"}`}\r\n      style={{ width, height }}\r\n      onClick={onClick}\r\n      {...props}\r\n    >\r\n      {icon}\r\n    </motion.div>\r\n  </NoiseWrapper>\r\n)\r\n\r\n/* ---------- MUSIC DETAILS ---------- */\r\nexport const MusicDetails = ({ hovered }: { hovered: boolean }) => {\r\n  const { tracks, currentTrackIndex } = useTracks()\r\n  const track = tracks[currentTrackIndex]\r\n  if (!track) return null\r\n\r\n  const coverImg =\r\n    track.cover ||\r\n    \"https://i.pinimg.com/736x/49/2d/e1/492de1d0dd1007de094678cb86c81dfa.jpg\"\r\n\r\n  return (\r\n    <AnimatePresence>\r\n      <motion.div\r\n        key={track.id}\r\n        initial={{ opacity: 0, x: -40, filter: \"blur(12px)\" }}\r\n        animate={{\r\n          opacity: 1,\r\n          x: 0,\r\n          filter: \"blur(0px)\",\r\n          transition: { duration: 0.6, ease: [0.25, 0.1, 0.25, 1] },\r\n        }}\r\n        exit={{\r\n          opacity: 0,\r\n          x: 40,\r\n          filter: \"blur(12px)\",\r\n          transition: { duration: 0.4, ease: \"easeInOut\" },\r\n        }}\r\n        className=\"flex flex-col items-center justify-center max-w-xs min-w-xs left-1/2 -translate-x-1/2 z-50 absolute bottom-full mb-2 rounded-xl border overflow-hidden shadow-lg\"\r\n        style={{ width: \"180px\", height: \"200px\" }}\r\n      >\r\n        <div\r\n          className=\"absolute inset-0 bg-cover bg-center scale-110\"\r\n          style={{\r\n            backgroundImage: `url(${coverImg})`,\r\n            filter: \"blur(25px) brightness(0.6)\",\r\n          }}\r\n        />\r\n        <div className=\"absolute inset-0 bg-black/40\" />\r\n        <div className=\"relative z-10 flex flex-col items-center justify-center gap-2 px-3 py-4\">\r\n          <motion.img\r\n            src={coverImg}\r\n            alt={track.title}\r\n            width={100}\r\n            height={100}\r\n            className=\"rounded-lg border border-gray-400 shadow-md object-cover\"\r\n            animate={{ rotate: hovered ? 0 : 360 }}\r\n            transition={{ repeat: Infinity, duration: 4, ease: \"linear\" }}\r\n          />\r\n          <motion.div\r\n            className=\"text-sm font-semibold text-white text-center\"\r\n            initial={{ opacity: 0, y: 10 }}\r\n            animate={{ opacity: 1, y: 0 }}\r\n            transition={{ delay: 0.2, duration: 0.3 }}\r\n          >\r\n            {track.title}\r\n          </motion.div>\r\n          <motion.div\r\n            className=\"text-xs text-gray-300 text-center\"\r\n            initial={{ opacity: 0, y: 10 }}\r\n            animate={{ opacity: 1, y: 0 }}\r\n            transition={{ delay: 0.3, duration: 0.3 }}\r\n          >\r\n            {track.artist}\r\n          </motion.div>\r\n        </div>\r\n      </motion.div>\r\n    </AnimatePresence>\r\n  )\r\n}\r\n\r\n\r\nexport const DefaultControls = () => {\r\n  const { isPaused, setIsPaused, tracks, currentTrackIndex, setCurrentTrackIndex } = useTracks()\r\n  const [hovered, setHovered] = useState(false)\r\n  const coverImg =\r\n    tracks[currentTrackIndex]?.cover ||\r\n    \"https://i.pinimg.com/736x/49/2d/e1/492de1d0dd1007de094678cb86c81dfa.jpg\"\r\n\r\n  const handleNext = () => {\r\n    setCurrentTrackIndex((prev) => (prev + 1) % tracks.length)\r\n  }\r\n\r\n  const handlePrev = () => {\r\n    setCurrentTrackIndex((prev) =>\r\n      prev === 0 ? tracks.length - 1 : prev - 1\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex flex-col items-center justify-center gap-4 relative\">\r\n  <AnimatePresence mode=\"wait\">\r\n  {hovered && (\r\n    <motion.div\r\n      key=\"details\"\r\n      initial={{ opacity: 0 }}\r\n      animate={{ opacity: 1 }}\r\n      exit={{ opacity: 0 }}\r\n      transition={{ duration: 0.2 }}\r\n    >\r\n      <MusicDetails hovered={hovered} />\r\n    </motion.div>\r\n  )}\r\n</AnimatePresence>\r\n      <NoiseWrapper className=\"rounded-xl\">\r\n        <motion.div\r\n          className=\"flex items-center justify-center border rounded-xl w-xs p-1 gap-4\"\r\n          onMouseEnter={() => setHovered(true)}\r\n          onMouseLeave={() => setHovered(false)}\r\n        >\r\n          <MusicButton icon={<SkipBack size={20} />} onClick={handlePrev} />\r\n          <div className=\"relative w-[45px] h-[45px]\">\r\n            <AnimatePresence>\r\n              {isPaused ? (\r\n                <motion.div\r\n                  key=\"play\"\r\n                  initial={{ opacity: 0, scale: 0 }}\r\n                  animate={{ opacity: 1, scale: 1 }}\r\n                  exit={{ opacity: 0, scale: 0 }}\r\n                  transition={{ duration: 0.3 }}\r\n                  className=\"absolute inset-0 flex items-center justify-center\"\r\n                >\r\n                  <MusicButton\r\n                    width={45}\r\n                    height={45}\r\n                    icon={<Play size={24} />}\r\n                    onClick={() => setIsPaused(false)}\r\n                  />\r\n                </motion.div>\r\n              ) : (\r\n                <motion.div\r\n                  key=\"pause\"\r\n                  initial={{ opacity: 0, scale: 0 }}\r\n                  animate={{ opacity: 1, scale: 1 }}\r\n                  exit={{ opacity: 0, scale: 0 }}\r\n                  transition={{ duration: 0.3 }}\r\n                  className=\"absolute inset-0 flex items-center justify-center\"\r\n                >\r\n                  <MusicButton\r\n                    width={45}\r\n                    height={45}\r\n                    icon={\r\n                      <motion.img\r\n                        src={coverImg}\r\n                        alt=\"Playing Track\"\r\n                        className=\"rounded-full border-4 border-gray-400 shadow-lg object-cover\"\r\n                        animate={{ rotate: hovered ? 0 : 360 }}\r\n                        transition={{\r\n                          repeat: Infinity,\r\n                          duration: 4,\r\n                          ease: \"linear\",\r\n                        }}\r\n                      />\r\n                    }\r\n                    onClick={() => setIsPaused(true)}\r\n                  />\r\n                </motion.div>\r\n              )}\r\n            </AnimatePresence>\r\n          </div>\r\n          <MusicButton icon={<SkipForward size={20} />} onClick={handleNext} />\r\n        </motion.div>\r\n      </NoiseWrapper>\r\n    </div>\r\n  )\r\n}\r\n\r\ninterface MusicPlayerProps {\r\n  data: TrackProps[]\r\n  children?: ReactNode\r\n}\r\n\r\nexport const MusicPlayer = ({ data, children }: MusicPlayerProps) => {\r\n  const [tracks, setTracks] = useState<TrackProps[]>([])\r\n  const [currentTrackIndex, setCurrentTrackIndex] = useState(0)\r\n  const [isPaused, setIsPaused] = useState(true)\r\n\r\n  useEffect(() => {\r\n    setTracks(data)\r\n  }, [data])\r\n\r\n  const contextValue: TracksContextProps = {\r\n    tracks,\r\n    setTracks,\r\n    currentTrackIndex,\r\n    setCurrentTrackIndex,\r\n    isPaused,\r\n    setIsPaused,\r\n  }\r\n\r\n  return (\r\n    <TracksContext.Provider value={contextValue}>\r\n      {children ? children : <DefaultControls />}\r\n    </TracksContext.Provider>\r\n  )\r\n}\r\n",
      "type": "registry:component"
    },
    {
      "path": "components/demo/music-player-demo.tsx",
      "content": "\r\n\"use client\"\r\n\r\nimport { MusicPlayer } from \"@/components/music-player\"\r\n\r\n\r\nexport function MusicPlayerDemo (){\r\n\r\n  const tracks = [\r\n  {\r\n    id: \"1\",\r\n    title: \"Lost in Space\",\r\n    artist: \"Synth Nova\",\r\n    url: \"/songs/lost-in-space.mp3\",\r\n    cover: \"https://i.pinimg.com/736x/49/2d/e1/492de1d0dd1007de094678cb86c81dfa.jpg\",\r\n  },\r\n  {\r\n    id: \"2\",\r\n    title: \"Midnight Mirage\",\r\n    artist: \"Shadow Echo\",\r\n    url: \"/songs/midnight-mirage.mp3\",\r\n    cover: \"https://i.pinimg.com/736x/73/e3/c1/73e3c183f2e948e62ea9e8fce20dffc8.jpg\",\r\n  },\r\n  {\r\n    id: \"3\",\r\n    title: \"Streetlight Whispers\",\r\n    artist: \"Noir Waves\",\r\n    url: \"/songs/streetlight-whispers.mp3\",\r\n    cover: \"https://i.pinimg.com/1200x/a6/e1/34/a6e1347b23f882e5351bb303bda93b09.jpg\",\r\n  },\r\n  {\r\n    id: \"4\",\r\n    title: \"Under Neon Shadows\",\r\n    artist: \"Velvet Drift\",\r\n    url: \"/songs/under-neon-shadows.mp3\",\r\n    cover: \"https://i.pinimg.com/1200x/d5/7d/34/d57d343d76214e7a20a884dd433936a9.jpg\",\r\n  },\r\n  {\r\n    id: \"5\",\r\n    title: \"Echoes In The Alley\",\r\n    artist: \"Midnight Static\",\r\n    url: \"/songs/echoes-in-the-alley.mp3\",\r\n    cover: \"https://i.pinimg.com/736x/3f/54/96/3f549606a9ce899a713dd1310ef02d0d.jpg\",\r\n  },\r\n]\r\n\r\n\r\n  return (\r\n    <MusicPlayer data={tracks}/>\r\n  )\r\n\r\n}",
      "type": "registry:component"
    }
  ]
}